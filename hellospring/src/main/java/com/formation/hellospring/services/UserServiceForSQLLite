public List<UserModel> findAll() {
        checkConnection();
        List<UserModel> users = new ArrayList<>();

        try {
            PreparedStatement statement = connection.prepareStatement("SELECT id, first_name, last_name, email FROM users");
            ResultSet resultSet = statement.executeQuery();
            while (resultSet.next()) {
                UserModel user = new UserModel();
                user.setId(resultSet.getInt("id"));
                user.setFirstName(resultSet.getString("first_name"));
                user.setLastName(resultSet.getString("last_name"));
                user.setEmail(resultSet.getString("email"));
                users.add(user);
            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return users;
    }

    public UserModel findById(int id) {
        checkConnection();
        UserModel user = null;

        try {
            PreparedStatement statement = connection.prepareStatement("SELECT id, first_name, last_name, email FROM users WHERE id = ?");
            statement.setInt(1, id);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.next()) {
                user = new UserModel();
                user.setId(resultSet.getInt("id"));
                user.setFirstName(resultSet.getString("first_name"));
                user.setLastName(resultSet.getString("last_name"));
                user.setEmail(resultSet.getString("email"));
            }
            resultSet.close();
            statement.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return user;
    }

    public UserModel save(UserModel user) {
        checkConnection();

        try {
            PreparedStatement statement;
            if (user.getId() == 0) {
                statement = connection.prepareStatement("INSERT INTO users (first_name, last_name, email) VALUES (?, ?, ?)", PreparedStatement.RETURN_GENERATED_KEYS);
            } else {
                statement = connection.prepareStatement("UPDATE users SET first_name = ?, last_name = ?, email = ? WHERE id = ?");
                statement.setInt(4, user.getId());
            }
            statement.setString(1, user.getFirstName());
            statement.setString(2, user.getLastName());
            statement.setString(3, user.getEmail());
            int affectedRows = statement.executeUpdate();
            if (affectedRows == 0) {
                throw new RuntimeException("Failed to save user");
            }
            if (user.getId() == 0) {
                ResultSet generatedKeys = statement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    user.setId(generatedKeys.getInt(1));
                } else {
                    throw new RuntimeException("Failed to retrieve generated key");
                }
                generatedKeys.close();
            }
            statement.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }

        return user;
}